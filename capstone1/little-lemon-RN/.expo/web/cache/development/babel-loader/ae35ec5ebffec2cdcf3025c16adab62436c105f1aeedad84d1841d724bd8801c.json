{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport OnboardingScreen from \"./screens/OnboardingScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\nimport ProfileScreen from \"./screens/ProfileScreen\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOnboardingCompleted = _useState2[0],\n    setIsOnboardingCompleted = _useState2[1];\n  useEffect(function () {\n    checkOnboardingStatus();\n  }, []);\n  var checkOnboardingStatus = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var value = yield AsyncStorage.getItem('onboardingStatus');\n        if (value !== null) {\n          setIsOnboardingCompleted(true);\n        }\n      } catch (error) {\n        console.log('Error retrieving onboarding status:', error);\n      }\n    });\n    return function checkOnboardingStatus() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(NavigationContainer, {\n    children: [_jsxs(Stack.Navigator, {\n      initialRouteName: \"Splash\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Splash\",\n        component: SplashScreen,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Onboarding\",\n        component: OnboardingScreen,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Home\",\n        component: HomeScreen,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Profile\",\n        component: ProfileScreen,\n        options: {\n          headerShown: false\n        }\n      })]\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}","map":{"version":3,"names":["StatusBar","React","useState","useEffect","StyleSheet","Text","View","NavigationContainer","createNativeStackNavigator","AsyncStorage","OnboardingScreen","SplashScreen","ProfileScreen","HomeScreen","jsx","_jsx","jsxs","_jsxs","Stack","App","_useState","_useState2","_slicedToArray","isOnboardingCompleted","setIsOnboardingCompleted","checkOnboardingStatus","_ref","_asyncToGenerator","value","getItem","error","console","log","apply","arguments","children","Navigator","initialRouteName","Screen","name","component","options","headerShown","style"],"sources":["/Users/joostdegussem/Desktop/capstone1/little-lemon-RN/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport OnboardingScreen from './screens/OnboardingScreen';\nimport SplashScreen from './screens/SplashScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport HomeScreen from './screens/HomeScreen';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const [isOnboardingCompleted, setIsOnboardingCompleted] = useState(false);\n\n  useEffect(() => {\n    checkOnboardingStatus();\n  }, []);\n\n  const checkOnboardingStatus = async () => {\n    try {\n      const value = await AsyncStorage.getItem('onboardingStatus');\n      if (value !== null) {\n        setIsOnboardingCompleted(true);\n      }\n    } catch (error) {\n      console.log('Error retrieving onboarding status:', error);\n    }\n  };\n\n\n\n  return (\n    <NavigationContainer >\n      <Stack.Navigator initialRouteName=\"Splash\">\n      <Stack.Screen name='Splash' component={SplashScreen} options={{ headerShown: false }} />\n        <Stack.Screen name=\"Onboarding\" component={OnboardingScreen} options={{ headerShown: false }} />\n        <Stack.Screen name=\"Home\" component={HomeScreen} options={{ headerShown: false }} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} options={{ headerShown: false }} />\n      </Stack.Navigator>\n      <StatusBar style=\"auto\" />\n    </NavigationContainer>\n  );\n}"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAEnD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,OAAOC,gBAAgB;AACvB,OAAOC,YAAY;AACnB,OAAOC,aAAa;AACpB,OAAOC,UAAU;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE9C,IAAMC,KAAK,GAAGV,0BAA0B,CAAC,CAAC;AAE1C,eAAe,SAASW,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAA0DlB,QAAQ,CAAC,KAAK,CAAC;IAAAmB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAlEG,qBAAqB,GAAAF,UAAA;IAAEG,wBAAwB,GAAAH,UAAA;EAEtDlB,SAAS,CAAC,YAAM;IACdsB,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMA,qBAAqB;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MACxC,IAAI;QACF,IAAMC,KAAK,SAASnB,YAAY,CAACoB,OAAO,CAAC,kBAAkB,CAAC;QAC5D,IAAID,KAAK,KAAK,IAAI,EAAE;UAClBJ,wBAAwB,CAAC,IAAI,CAAC;QAChC;MACF,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEF,KAAK,CAAC;MAC3D;IACF,CAAC;IAAA,gBATKL,qBAAqBA,CAAA;MAAA,OAAAC,IAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;EAAA,GAS1B;EAID,OACEjB,KAAA,CAACV,mBAAmB;IAAA4B,QAAA,GAClBlB,KAAA,CAACC,KAAK,CAACkB,SAAS;MAACC,gBAAgB,EAAC,QAAQ;MAAAF,QAAA,GAC1CpB,IAAA,CAACG,KAAK,CAACoB,MAAM;QAACC,IAAI,EAAC,QAAQ;QAACC,SAAS,EAAE7B,YAAa;QAAC8B,OAAO,EAAE;UAAEC,WAAW,EAAE;QAAM;MAAE,CAAE,CAAC,EACtF3B,IAAA,CAACG,KAAK,CAACoB,MAAM;QAACC,IAAI,EAAC,YAAY;QAACC,SAAS,EAAE9B,gBAAiB;QAAC+B,OAAO,EAAE;UAAEC,WAAW,EAAE;QAAM;MAAE,CAAE,CAAC,EAChG3B,IAAA,CAACG,KAAK,CAACoB,MAAM;QAACC,IAAI,EAAC,MAAM;QAACC,SAAS,EAAE3B,UAAW;QAAC4B,OAAO,EAAE;UAAEC,WAAW,EAAE;QAAM;MAAE,CAAE,CAAC,EACpF3B,IAAA,CAACG,KAAK,CAACoB,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,SAAS,EAAE5B,aAAc;QAAC6B,OAAO,EAAE;UAAEC,WAAW,EAAE;QAAM;MAAE,CAAE,CAAC;IAAA,CAC3E,CAAC,EAClB3B,IAAA,CAACf,SAAS;MAAC2C,KAAK,EAAC;IAAM,CAAE,CAAC;EAAA,CACP,CAAC;AAE1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}